/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.records;


import edu.java.scrapper.domain.jooq.tables.Event;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventRecord extends UpdatableRecordImpl<EventRecord> implements Record3<Long, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>EVENT.ID</code>.
     */
    public void setId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>EVENT.ID</code>.
     */
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>EVENT.TYPE</code>.
     */
    public void setType(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>EVENT.TYPE</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>EVENT.LINK_ID</code>.
     */
    public void setLinkId(@NotNull Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>EVENT.LINK_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getLinkId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row3<Long, String, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return Event.EVENT.ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Event.EVENT.TYPE;
    }

    @Override
    @NotNull
    public Field<Long> field3() {
        return Event.EVENT.LINK_ID;
    }

    @Override
    @Nullable
    public Long component1() {
        return getId();
    }

    @Override
    @NotNull
    public String component2() {
        return getType();
    }

    @Override
    @NotNull
    public Long component3() {
        return getLinkId();
    }

    @Override
    @Nullable
    public Long value1() {
        return getId();
    }

    @Override
    @NotNull
    public String value2() {
        return getType();
    }

    @Override
    @NotNull
    public Long value3() {
        return getLinkId();
    }

    @Override
    @NotNull
    public EventRecord value1(@Nullable Long value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public EventRecord value2(@NotNull String value) {
        setType(value);
        return this;
    }

    @Override
    @NotNull
    public EventRecord value3(@NotNull Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public EventRecord values(@Nullable Long value1, @NotNull String value2, @NotNull Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventRecord
     */
    public EventRecord() {
        super(Event.EVENT);
    }

    /**
     * Create a detached, initialised EventRecord
     */
    @ConstructorProperties({ "id", "type", "linkId" })
    public EventRecord(@Nullable Long id, @NotNull String type, @NotNull Long linkId) {
        super(Event.EVENT);

        setId(id);
        setType(type);
        setLinkId(linkId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EventRecord
     */
    public EventRecord(edu.java.scrapper.domain.jooq.tables.pojos.Event value) {
        super(Event.EVENT);

        if (value != null) {
            setId(value.getId());
            setType(value.getType());
            setLinkId(value.getLinkId());
            resetChangedOnNotNull();
        }
    }
}
